Dependency Graph:
R0:R0,
R1:R1,R2,
R2:

Reverse Dependency Graph:
R0:R0,
R1:R1,
R2:R1,

Entered DFSTree
backwards boolean is 1
order vector is
0 1 2 
Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: False
Components: 

Node under consideration is 2

Node has not been visited
After visiting, node visited is 1

Node being added to the stack is 2
After being sorted, neighbors are:
leaving DFSTOrdered
SCC isSize: 1
Loops?: False
Components: 2 
scc after DFSOrdered is: 
Size: 1
Loops?: False
Components: 2 

Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: False
Components: 

Node under consideration is 1

Node has not been visited
After visiting, node visited is 1

Node being added to the stack is 1
In sort: neighbor being added is 2vs 2
In sort: neighbor being added is 1vs 1
After being sorted, neighbors are:2 1 
Neighbor that will be searched recursively is 2
Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: False
Components: 

Node under consideration is 2

Node has loop to itself
Neighbor that will be searched recursively is 1
Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: True
Components: 

Node under consideration is 1

leaving DFSTOrdered
SCC isSize: 1
Loops?: True
Components: 1 
scc after DFSOrdered is: 
Size: 1
Loops?: True
Components: 1 

Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: False
Components: 

Node under consideration is 0

Node has not been visited
After visiting, node visited is 1

Node being added to the stack is 0
Node only had one neighbor: 0
After being sorted, neighbors are:0 
Node has loop to itself
Neighbor that will be searched recursively is 0
Entered DFSOrdered 

SCC at start is: 
Size: 0
Loops?: True
Components: 

Node under consideration is 0

leaving DFSTOrdered
SCC isSize: 1
Loops?: True
Components: 0 
scc after DFSOrdered is: 
Size: 1
Loops?: True
Components: 0 

Strongly connected component order is
Size: 1
Loops?: False
Components: 2 

Size: 1
Loops?: True
Components: 1 

Size: 1
Loops?: True
Components: 0 


